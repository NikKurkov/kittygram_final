name: Kittygram CI/CD

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend
  GATEWAY_IMAGE: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install backend deps + flake8
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8

      - name: Lint (PEP8)
        working-directory: backend
        run: flake8

#      - name: Run backend tests
#        run: pytest -q

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest

      - name: Build & push gateway
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: ${{ env.GATEWAY_IMAGE }}:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "~/kittygram/"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p ~/kittygram
            cd ~/kittygram

            # .env (для compose)
            cat > .env << 'EOF'
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_NAME=${{ secrets.POSTGRES_DB }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKER_USERNAME }}
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG=0
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            EOF

            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d

            # миграции и статика
            docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput

      - name: Notify Telegram
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          format: markdown
          message: |
            ✅ *Kittygram deployed successfully!*
            Repo: ${{ github.repository }}
            Commit: ${{ github.sha }}
